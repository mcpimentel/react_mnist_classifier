{"version":3,"sources":["onnx/utils.js","components/Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["getTensorFromCanvasContext","ctx","data","getImageData","canvas","width","height","Tensor","Float32Array","lastX","lastY","isMouseDown","hasIntroText","CANVAS_SIZE","CANVAS_SCALE","Canvas","props","session","status","useRef","useEffect","canvasEle","current","getContext","lineWidth","lineJoin","font","textAlign","textBaseline","fillStyle","strokeStyle","fillText","addEventListener","canvasMouseDown","canvasMouseMove","document","body","bodyMouseUp","bodyMouseOut","canvasTouchStart","canvasTouchMove","bodyTouchEnd","drawLine","info","fromX","fromY","toX","toY","beginPath","moveTo","lineTo","closePath","stroke","updatePredictions","event","clearCanvas","x","offsetX","y","offsetY","console","log","bcr","target","getBoundingClientRect","targetTouches","clientX","clientY","clearRect","i","element","getElementById","className","children","style","a","modelLoaded","imgData","run","outputMap","outputTensor","values","next","value","predictions","maxPrediction","Math","max","length","padding","ref","onClick","id","INITIAL_STATE","sessionRunning","inferenceTime","error","output","modelLoading","backendHint","selectedImage","MODEL_URL","window","location","hostname","App","state","InferenceSession","runModel","setState","loadModel","warn","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.775870db.chunk.js","sourcesContent":["//import ndarray from \"ndarray\";\n//import ops from \"ndarray-ops\";\nimport { Tensor } from \"onnxjs\";\n\nexport async function warmupModel(model, size) {\n\t// OK. we generate a random input and call Session.run() as a warmup query\n\tconst warmupTensor = new Tensor(new Float32Array(size*size*4), \"float32\", [size, size, 4]);\n\ttry {\n\t\tawait model.run([warmupTensor]);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n}\n\nexport function getTensorFromCanvasContext(ctx) {\n\tconst imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n\tconst { data } = imageData;\n    // const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataTensor = new Tensor(new Float32Array(data), \"float32\");\n    return dataTensor;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { getTensorFromCanvasContext } from '../onnx/utils';\n\nimport './Canvas.css';\n\nlet isMouseDown = false;\nlet hasIntroText = true;\nlet lastX;\nlet lastY;\nconst CANVAS_SIZE = 280;\nconst CANVAS_SCALE = 0.5;\n\n\n// const IMAGE_SIZE = 28;\nlet ctx = null;\n\nconst Canvas = props => {\n    const { session, status } = props; \n\n    // setup canvas\n    const canvas = useRef();\n    \n    // initialize canvas\n    useEffect(() => {\n        const canvasEle = canvas.current;\n        canvasEle.width = 280;\n        canvasEle.height = 280;\n        // get canvas context\n        ctx = canvasEle.getContext(\"2d\");\n        ctx.lineWidth = 28;\n        ctx.lineJoin = \"round\";\n        ctx.font = \"28px sans-serif\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"#212121\";\n        ctx.strokeStyle = \"#212121\";\n        //ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        ctx.fillText(\"Write a number here!\", CANVAS_SIZE / 2, CANVAS_SIZE / 2);\n        \n    }, []);\n\n    // add canvas \n    useEffect(() => {\n        const canvasEle = canvas.current;\n        // event listeners for mouse (browser + PCs)\n        canvasEle.addEventListener(\"mousedown\", canvasMouseDown);\n        canvasEle.addEventListener(\"mousemove\", canvasMouseMove);\n        document.body.addEventListener(\"mouseup\", bodyMouseUp);\n        document.body.addEventListener(\"mouseout\", bodyMouseOut);\n        // event listeners for mobile devices\n        canvasEle.addEventListener(\"touchstart\", canvasTouchStart);\n        canvasEle.addEventListener(\"touchmove\", canvasTouchMove);\n        document.body.addEventListener(\"touchend\", bodyTouchEnd);\n    });\n\n    // draw a line\n    const drawLine = (info) => {\n        const { fromX, fromY, toX, toY } = info;\n        //const { color = 'black', width = 20 } = style;\n        ctx.beginPath();\n        ctx.moveTo(fromX, fromY);\n        ctx.lineTo(toX, toY);\n        //ctx.strokeStyle = color;\n        //ctx.lineWidth = width;\n        ctx.closePath();\n        ctx.stroke();\n        updatePredictions();\n    };\n    \n    // To draw a dot on the mouse down event, we set laxtX and lastY to be\n    // slightly offset from x and y, and then we call `canvasMouseMove(event)`,\n    // which draws a line from (laxtX, lastY) to (x, y) that shows up as a\n    // dot because the difference between those points is so small. However,\n    // if the points were the same, nothing would be drawn, which is why the\n    // 0.001 offset is added.\n    const canvasMouseDown = (event) => {\n        //console.log(\"canvas mouse down\");\n        isMouseDown = true;\n        if (hasIntroText) {\n            clearCanvas();\n            hasIntroText = false;\n        }\n        const x = event.offsetX / CANVAS_SCALE;\n        const y = event.offsetY / CANVAS_SCALE;\n        lastX = x + 0.001;\n        lastY = y + 0.001;\n        // console.log(event);\n        canvasMouseMove(event);\n    }\n    const canvasTouchStart = (event) => {\n        console.log(\"touch start\");\n        isMouseDown = true;\n        if (hasIntroText) {\n            clearCanvas();\n            hasIntroText = false;\n        }\n        const bcr = event.target.getBoundingClientRect();\n        const x = (event.targetTouches[0].clientX - bcr.x) / CANVAS_SCALE;\n        const y = (event.targetTouches[0].clientY - bcr.y) / CANVAS_SCALE;\n        lastX = x + 0.001;\n        lastY = y + 0.001;\n        canvasTouchMove(event);\n    }\n    // To draw the path on the mouse move event\n    const canvasMouseMove = (event) => {\n        const toX = event.offsetX / CANVAS_SCALE;\n        const toY = event.offsetY / CANVAS_SCALE;\n        if (isMouseDown) {\n            //console.log(\"canvas mouse move\");\n            //console.log({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n            drawLine({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n        }\n        lastX = toX;\n        lastY = toY;\n    }\n    // To draw the path on the mouse move event\n    const canvasTouchMove = (event) => {\n        const bcr = event.target.getBoundingClientRect();\n        const toX = (event.targetTouches[0].clientX - bcr.x) / CANVAS_SCALE;\n        const toY = (event.targetTouches[0].clientY - bcr.y) / CANVAS_SCALE;\n        if (isMouseDown) {\n            //console.log(\"canvas mouse move\");\n            //console.log({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n            drawLine({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n        }\n        lastX = toX;\n        lastY = toY;\n    }\n    // stop drawing when mouse is up\n    const bodyMouseUp = () => {\n        // console.log(\"body mouse up\");\n        isMouseDown = false;\n        //console.log({ fromX: lastX, fromY: lastY });\n    }\n    // stop drawing when mouse is up\n    const bodyTouchEnd = () => {\n        // console.log(\"touch end\");\n        isMouseDown = false;\n        console.log({ fromX: lastX, fromY: lastY });\n    }\n    // We won't be able to detect a MouseUp event if the mouse has moved\n    // ouside the window, so when the mouse leaves the window, we set\n    // `isMouseDown` to false automatically. This prevents lines from\n    // continuing to be drawn when the mouse returns to the canvas after\n    // having been released outside the window.\n    const bodyMouseOut = () => {\n        // console.log(\"body mouse out\");\n        isMouseDown = false;\n        //if (!event.relatedTarget || event.relatedTarget.nodeName === \"HTML\") {\n        //    isMouseDown = false;\n        //}\n    }\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        for (let i = 0; i < 10; i++) {\n            const element = document.getElementById(`prediction-${i}`);\n            element.className = \"prediction-col\";\n            element.children[1].children[0].style.width = \"0\";\n            element.className = \"prediction-col\";\n        }\n    }\n\n    const updatePredictions = async () => {\n        if (status && status.modelLoaded) {\n            // Get the predictions for the canvas data.\n            const imgData = getTensorFromCanvasContext(ctx);\n        \n            const outputMap = await session.run([imgData]);\n            const outputTensor = outputMap.values().next().value;\n            const predictions = outputTensor.data;\n            const maxPrediction = Math.max(...predictions);\n            //console.log(predictions);\n            for (let i = 0; i < predictions.length; i++) {\n                const element = document.getElementById(`prediction-${i}`);\n                element.children[1].children[0].style.width = `${predictions[i] * 100}%`;\n                element.className =\n                  predictions[i] === maxPrediction\n                    ? \"prediction-col top-prediction\"\n                    : \"prediction-col\";\n            }\n        }\n      }\n\n    return (\n        <div style={{ padding: 10 }}>\n            <canvas className=\"canvas\" ref={canvas} {...props}/>\n            <div></div>\n            <button className=\"button\"\n                onClick={() => {\n                    clearCanvas();\n                    console.log(\"Button Clear Clicked\")\n                }}>CLEAR\n            </button>\n            <div>\n                <div className=\"predictions\">\n                    <div className=\"prediction-col\" id=\"prediction-0\">\n                        <div className=\"prediction-number\">0</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-1\">\n                        <div className=\"prediction-number\">1</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-2\">\n                        <div className=\"prediction-number\">2</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-3\">\n                        <div className=\"prediction-number\">3</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-4\">\n                        <div className=\"prediction-number\">4</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-5\">\n                        <div className=\"prediction-number\">5</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-6\">\n                        <div className=\"prediction-number\">6</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-7\">\n                        <div className=\"prediction-number\">7</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-8\">\n                        <div className=\"prediction-number\">8</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-9\">\n                        <div className=\"prediction-number\">9</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Canvas;\n","import React from \"react\";\nimport Canvas from \"./components/Canvas\";\nimport { InferenceSession } from \"onnxjs\";\nimport \"./App.css\";\n\nconst INITIAL_STATE = {\n  sessionRunning: false,\n  inferenceTime: 0,\n  error: false,\n  output: [],\n  modelLoading: false,\n  modelLoaded: false,\n  backendHint: 'webgl', // ['webgl', 'wasm', 'cpu']\n  selectedImage: null,\n}\n\n// if on localhost >> uncomment next line\nlet MODEL_URL = \"./models/onnx_model.onnx\";\n// if on localhost >> comment next line\n//const MODEL_URL = \"./models/onnx_model.onnx\";\n\nif (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\n  MODEL_URL = './react_mnist_classifier/models/onnx_model.onnx';\n  console.log(\"It's a local server!\");\n} else {\n  console.log(\"It's NOT a local server!\");\n}\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.runModel();\n  }\n\n  state = { ...INITIAL_STATE };\n\n  session = new InferenceSession({ backendHint: this.state.backendHint });\n  \n  runModel = async () => {\n    try {\n      if (!this.state.modelLoaded) {\n        this.setState({\n          modelLoading: true,\n        });\n        await this.session.loadModel(MODEL_URL);\n        this.setState({\n          modelLoaded: true,\n          modelLoading: false,\n        });\n      }\n    }\n    catch(e) {\n      console.warn(e);\n    }\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          A simple demo of a classification model running on the browser! WORK IN PROGRESS!\n          <p>\n            Tested on a couple of browsers only.\n          </p>\n        </header>\n        <Canvas status={this.state} session={this.session} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}