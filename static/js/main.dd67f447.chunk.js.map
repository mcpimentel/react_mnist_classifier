{"version":3,"sources":["onnx/utils.js","components/Canvas.js","components/CanvasUncertainty.js","components/Controller.js","App.js","reportWebVitals.js","index.js"],"names":["getTensorFromCanvasContext","ctx","data","getImageData","canvas","width","height","Tensor","Float32Array","lastX","lastY","isMouseDown","hasIntroText","CANVAS_SIZE","CANVAS_SCALE","Canvas","props","session","modelloaded","useRef","useEffect","canvasEle","current","getContext","lineWidth","lineJoin","font","textAlign","textBaseline","fillStyle","strokeStyle","fillText","addEventListener","canvasMouseDown","canvasMouseMove","document","body","bodyMouseUp","bodyMouseOut","canvasTouchStart","canvasTouchMove","bodyTouchEnd","drawLine","info","fromX","fromY","toX","toY","beginPath","moveTo","lineTo","closePath","stroke","updatePredictions","event","clearCanvas","x","offsetX","y","offsetY","bcr","target","getBoundingClientRect","targetTouches","clientX","clientY","clearRect","i","element","getElementById","className","children","style","a","imgData","run","outputMap","outputTensor","values","next","value","predictions","maxPrediction","Math","max","length","padding","ref","onClick","id","CanvasUncertainty","calculateMaximumVariance","preds","sqrt","splice","Controller","context","state","key","this","session2","status","model2loaded","modelloading","model2loading","Tabs","activeKey","onSelect","setState","Tab","eventKey","title","React","Component","INITIAL_STATE","backendHint","MODEL_URL","MODEL_URL_2","window","location","hostname","App","InferenceSession","loadModel","modelLoading","console","warn","loadModel2","model2Loaded","model2Loading","href","display","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment"],"mappings":"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","file":"static/js/main.dd67f447.chunk.js","sourcesContent":["//import ndarray from \"ndarray\";\n//import ops from \"ndarray-ops\";\nimport { Tensor } from \"onnxjs\";\n\nexport async function warmupModel(model, size) {\n\t// OK. we generate a random input and call Session.run() as a warmup query\n\tconst warmupTensor = new Tensor(new Float32Array(size*size*4), \"float32\", [size, size, 4]);\n\ttry {\n\t\tawait model.run([warmupTensor]);\n\t} catch (e) {\n\t\tconsole.error(e);\n\t}\n}\n\nexport function getTensorFromCanvasContext(ctx) {\n\tconst imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n\tconst { data } = imageData;\n    // const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n    const dataTensor = new Tensor(new Float32Array(data), \"float32\");\n    return dataTensor;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { getTensorFromCanvasContext } from '../onnx/utils';\n\nimport './Canvas.css';\n\nlet isMouseDown = false;\nlet hasIntroText = true;\nlet lastX;\nlet lastY;\nconst CANVAS_SIZE = 280;\nconst CANVAS_SCALE = 0.5;\n\n\n// const IMAGE_SIZE = 28;\nlet ctx = null;\n\nconst Canvas = props => {\n    const { session, modelloaded } = props; \n\n    // setup canvas\n    const canvas = useRef();\n    \n    // initialize canvas\n    useEffect(() => {\n        const canvasEle = canvas.current;\n        canvasEle.width = 280;\n        canvasEle.height = 280;\n        // get canvas context\n        ctx = canvasEle.getContext(\"2d\");\n        ctx.lineWidth = 28;\n        ctx.lineJoin = \"round\";\n        ctx.font = \"28px sans-serif\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"#212121\";\n        ctx.strokeStyle = \"#212121\";\n        //ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        ctx.fillText(\"Write a number here!\", CANVAS_SIZE / 2, CANVAS_SIZE / 2);\n        \n    }, []);\n\n    // add canvas \n    useEffect(() => {\n        const canvasEle = canvas.current;\n        // event listeners for mouse (browser + PCs)\n        canvasEle.addEventListener(\"mousedown\", canvasMouseDown);\n        canvasEle.addEventListener(\"mousemove\", canvasMouseMove);\n        document.body.addEventListener(\"mouseup\", bodyMouseUp);\n        document.body.addEventListener(\"mouseout\", bodyMouseOut);\n        // event listeners for mobile devices\n        canvasEle.addEventListener(\"touchstart\", canvasTouchStart);\n        canvasEle.addEventListener(\"touchmove\", canvasTouchMove);\n        document.body.addEventListener(\"touchend\", bodyTouchEnd);\n    });\n\n    // draw a line\n    const drawLine = (info) => {\n        const { fromX, fromY, toX, toY } = info;\n        //const { color = 'black', width = 20 } = style;\n        ctx.beginPath();\n        ctx.moveTo(fromX, fromY);\n        ctx.lineTo(toX, toY);\n        //ctx.strokeStyle = color;\n        //ctx.lineWidth = width;\n        ctx.closePath();\n        ctx.stroke();\n        updatePredictions();\n    };\n    \n    // To draw a dot on the mouse down event, we set laxtX and lastY to be\n    // slightly offset from x and y, and then we call `canvasMouseMove(event)`,\n    // which draws a line from (laxtX, lastY) to (x, y) that shows up as a\n    // dot because the difference between those points is so small. However,\n    // if the points were the same, nothing would be drawn, which is why the\n    // 0.001 offset is added.\n    const canvasMouseDown = (event) => {\n        //console.log(\"canvas mouse down\");\n        isMouseDown = true;\n        if (hasIntroText) {\n            clearCanvas();\n            hasIntroText = false;\n        }\n        const x = event.offsetX / CANVAS_SCALE;\n        const y = event.offsetY / CANVAS_SCALE;\n        lastX = x + 0.001;\n        lastY = y + 0.001;\n        // console.log(event);\n        canvasMouseMove(event);\n    }\n    const canvasTouchStart = (event) => {\n        //console.log(\"touch start\");\n        isMouseDown = true;\n        if (hasIntroText) {\n            clearCanvas();\n            hasIntroText = false;\n        }\n        const bcr = event.target.getBoundingClientRect();\n        const x = (event.targetTouches[0].clientX - bcr.x) / CANVAS_SCALE;\n        const y = (event.targetTouches[0].clientY - bcr.y) / CANVAS_SCALE;\n        lastX = x + 0.001;\n        lastY = y + 0.001;\n        canvasTouchMove(event);\n    }\n    // To draw the path on the mouse move event\n    const canvasMouseMove = (event) => {\n        const toX = event.offsetX / CANVAS_SCALE;\n        const toY = event.offsetY / CANVAS_SCALE;\n        if (isMouseDown) {\n            //console.log(\"canvas mouse move\");\n            //console.log({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n            drawLine({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n        }\n        lastX = toX;\n        lastY = toY;\n    }\n    // To draw the path on the mouse move event\n    const canvasTouchMove = (event) => {\n        const bcr = event.target.getBoundingClientRect();\n        const toX = (event.targetTouches[0].clientX - bcr.x) / CANVAS_SCALE;\n        const toY = (event.targetTouches[0].clientY - bcr.y) / CANVAS_SCALE;\n        if (isMouseDown) {\n            //console.log(\"canvas mouse move\");\n            //console.log({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n            drawLine({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n        }\n        lastX = toX;\n        lastY = toY;\n    }\n    // stop drawing when mouse is up\n    const bodyMouseUp = () => {\n        //console.log(\"body mouse up\");\n        isMouseDown = false;\n        //console.log({ fromX: lastX, fromY: lastY });\n    }\n    // stop drawing when mouse is up\n    const bodyTouchEnd = () => {\n        // console.log(\"touch end\");\n        isMouseDown = false;\n        //console.log({ fromX: lastX, fromY: lastY });\n    }\n    // We won't be able to detect a MouseUp event if the mouse has moved\n    // ouside the window, so when the mouse leaves the window, we set\n    // `isMouseDown` to false automatically. This prevents lines from\n    // continuing to be drawn when the mouse returns to the canvas after\n    // having been released outside the window.\n    const bodyMouseOut = () => {\n        //console.log(\"body mouse out\");\n        isMouseDown = false;\n        //if (!event.relatedTarget || event.relatedTarget.nodeName === \"HTML\") {\n        //    isMouseDown = false;\n        //}\n    }\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        for (let i = 0; i < 10; i++) {\n            const element = document.getElementById(`prediction-${i}`);\n            element.className = \"prediction-col\";\n            element.children[1].children[0].style.width = \"0\";\n            element.className = \"prediction-col\";\n        }\n    }\n\n    const updatePredictions = async () => {\n        if (modelloaded===1) {\n            // Get the predictions for the canvas data.\n            const imgData = getTensorFromCanvasContext(ctx);\n        \n            const outputMap = await session.run([imgData]);\n            const outputTensor = outputMap.values().next().value;\n            const predictions = outputTensor.data;\n            const maxPrediction = Math.max(...predictions);\n            for (let i = 0; i < predictions.length; i++) {\n                const element = document.getElementById(`prediction-${i}`);\n                element.children[1].children[0].style.width = `${predictions[i] * 100}%`;\n                element.className =\n                  predictions[i] === maxPrediction\n                    ? \"prediction-col top-prediction\"\n                    : \"prediction-col\";\n            }\n        }\n      }\n\n    return (\n        <div style={{ padding: 10 }}>\n            <canvas className=\"canvas\" ref={canvas} {...props}/>\n            <div></div>\n            <button className=\"button\"\n                onClick={() => {\n                    clearCanvas();\n                    //console.log(\"button clear clicked\")\n                }}>CLEAR\n            </button>\n            <div>\n                <div className=\"predictions\">\n                    <div className=\"prediction-col\" id=\"prediction-0\">\n                        <div className=\"prediction-number\">0</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-1\">\n                        <div className=\"prediction-number\">1</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-2\">\n                        <div className=\"prediction-number\">2</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-3\">\n                        <div className=\"prediction-number\">3</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-4\">\n                        <div className=\"prediction-number\">4</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-5\">\n                        <div className=\"prediction-number\">5</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-6\">\n                        <div className=\"prediction-number\">6</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-7\">\n                        <div className=\"prediction-number\">7</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-8\">\n                        <div className=\"prediction-number\">8</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-9\">\n                        <div className=\"prediction-number\">9</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default Canvas;\n","import React, { useEffect, useRef } from 'react';\nimport { getTensorFromCanvasContext } from '../onnx/utils';\n\nimport './CanvasUncertainty.css';\n\nlet isMouseDown = false;\nlet hasIntroText = true;\nlet lastX;\nlet lastY;\nconst CANVAS_SIZE = 280;\nconst CANVAS_SCALE = 0.5;\n\n\n// const IMAGE_SIZE = 28;\nlet ctx = null;\n\nconst CanvasUncertainty = props => {\n    const { session, modelloaded } = props; \n\n    // setup canvas\n    const canvas = useRef();\n    \n    // initialize canvas\n    useEffect(() => {\n        const canvasEle = canvas.current;\n        canvasEle.width = 280;\n        canvasEle.height = 280;\n        // get canvas context\n        ctx = canvasEle.getContext(\"2d\");\n        ctx.lineWidth = 28;\n        ctx.lineJoin = \"round\";\n        ctx.font = \"28px sans-serif\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"#212121\";\n        ctx.strokeStyle = \"#212121\";\n        //ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        ctx.fillText(\"Write a number here!\", CANVAS_SIZE / 2, CANVAS_SIZE / 2);\n        \n    }, []);\n\n    // add canvas \n    useEffect(() => {\n        const canvasEle = canvas.current;\n        // event listeners for mouse (browser + PCs)\n        canvasEle.addEventListener(\"mousedown\", canvasMouseDown);\n        canvasEle.addEventListener(\"mousemove\", canvasMouseMove);\n        document.body.addEventListener(\"mouseup\", bodyMouseUp);\n        document.body.addEventListener(\"mouseout\", bodyMouseOut);\n        // event listeners for mobile devices\n        canvasEle.addEventListener(\"touchstart\", canvasTouchStart);\n        canvasEle.addEventListener(\"touchmove\", canvasTouchMove);\n        document.body.addEventListener(\"touchend\", bodyTouchEnd);\n    });\n\n    // draw a line\n    const drawLine = (info) => {\n        const { fromX, fromY, toX, toY } = info;\n        //const { color = 'black', width = 20 } = style;\n        ctx.beginPath();\n        ctx.moveTo(fromX, fromY);\n        ctx.lineTo(toX, toY);\n        //ctx.strokeStyle = color;\n        //ctx.lineWidth = width;\n        ctx.closePath();\n        ctx.stroke();\n        updatePredictions();\n    };\n    \n    // To draw a dot on the mouse down event, we set laxtX and lastY to be\n    // slightly offset from x and y, and then we call `canvasMouseMove(event)`,\n    // which draws a line from (laxtX, lastY) to (x, y) that shows up as a\n    // dot because the difference between those points is so small. However,\n    // if the points were the same, nothing would be drawn, which is why the\n    // 0.001 offset is added.\n    const canvasMouseDown = (event) => {\n        //console.log(\"canvas mouse down\");\n        isMouseDown = true;\n        if (hasIntroText) {\n            clearCanvas();\n            hasIntroText = false;\n        }\n        const x = event.offsetX / CANVAS_SCALE;\n        const y = event.offsetY / CANVAS_SCALE;\n        lastX = x + 0.001;\n        lastY = y + 0.001;\n        // console.log(event);\n        canvasMouseMove(event);\n    }\n    const canvasTouchStart = (event) => {\n        //console.log(\"touch start\");\n        isMouseDown = true;\n        if (hasIntroText) {\n            clearCanvas();\n            hasIntroText = false;\n        }\n        const bcr = event.target.getBoundingClientRect();\n        const x = (event.targetTouches[0].clientX - bcr.x) / CANVAS_SCALE;\n        const y = (event.targetTouches[0].clientY - bcr.y) / CANVAS_SCALE;\n        lastX = x + 0.001;\n        lastY = y + 0.001;\n        canvasTouchMove(event);\n    }\n    // To draw the path on the mouse move event\n    const canvasMouseMove = (event) => {\n        const toX = event.offsetX / CANVAS_SCALE;\n        const toY = event.offsetY / CANVAS_SCALE;\n        if (isMouseDown) {\n            //console.log(\"canvas mouse move\");\n            //console.log({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n            drawLine({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n        }\n        lastX = toX;\n        lastY = toY;\n    }\n    // To draw the path on the mouse move event\n    const canvasTouchMove = (event) => {\n        const bcr = event.target.getBoundingClientRect();\n        const toX = (event.targetTouches[0].clientX - bcr.x) / CANVAS_SCALE;\n        const toY = (event.targetTouches[0].clientY - bcr.y) / CANVAS_SCALE;\n        if (isMouseDown) {\n            //console.log(\"canvas mouse move\");\n            //console.log({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n            drawLine({fromX: lastX, fromY: lastY, toX: toX, toY: toY });\n        }\n        lastX = toX;\n        lastY = toY;\n    }\n    // stop drawing when mouse is up\n    const bodyMouseUp = () => {\n        //console.log(\"body mouse up\");\n        isMouseDown = false;\n        //console.log({ fromX: lastX, fromY: lastY });\n    }\n    // stop drawing when mouse is up\n    const bodyTouchEnd = () => {\n        // console.log(\"touch end\");\n        isMouseDown = false;\n        //console.log({ fromX: lastX, fromY: lastY });\n    }\n    // We won't be able to detect a MouseUp event if the mouse has moved\n    // ouside the window, so when the mouse leaves the window, we set\n    // `isMouseDown` to false automatically. This prevents lines from\n    // continuing to be drawn when the mouse returns to the canvas after\n    // having been released outside the window.\n    const bodyMouseOut = () => {\n        //console.log(\"body mouse out\");\n        isMouseDown = false;\n        //if (!event.relatedTarget || event.relatedTarget.nodeName === \"HTML\") {\n        //    isMouseDown = false;\n        //}\n    }\n\n    const clearCanvas = () => {\n        ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n        for (let i = 0; i < 11; i++) {\n            const element = document.getElementById(`prediction-u-${i}`);\n            element.className = \"prediction-col\";\n            element.children[1].children[0].style.width = \"0\";\n            element.className = \"prediction-col\";\n        }\n    }\n\n    const calculateMaximumVariance = (preds) => {\n        // this is kind of a random scaler (for now)!\n        const value = 200*Math.sqrt(Math.max(...[...preds].splice(10,19)));\n        if (value > 100) {\n            return 100;\n        }\n        return value; \n    }\n    \n    const updatePredictions = async () => {\n        if (modelloaded===1) {\n            // Get the predictions for the canvas data.\n            const imgData = getTensorFromCanvasContext(ctx);\n        \n            const outputMap = await session.run([imgData]);\n            const outputTensor = outputMap.values().next().value;\n            const predictions = outputTensor.data;\n            const maxPrediction = Math.max(...predictions);\n            for (let i = 0; i < 10; i++) {\n                const element = document.getElementById(`prediction-u-${i}`);\n                element.children[1].children[0].style.width = `${predictions[i] * 100}%`;\n                element.className =\n                    predictions[i] === maxPrediction\n                        ? \"prediction-col top-prediction-uncertain\"\n                        : \"prediction-col\";\n            }\n            const element = document.getElementById(`prediction-u-${10}`);\n            element.children[1].children[0].style.width = `${calculateMaximumVariance(predictions)}%`;\n            element.className = \"prediction-col uncertain-prediction\";\n        }   \n      }\n\n    return (\n        <div style={{ padding: 10 }}>\n            <canvas className=\"canvas\" ref={canvas} {...props}/>\n            <div></div>\n            <button className=\"button\"\n                onClick={() => {\n                    clearCanvas();\n                    //console.log(\"button clear clicked\")\n                }}>CLEAR\n            </button>\n            <div>\n                <div className=\"predictions\">\n                    <div className=\"prediction-col\" id=\"prediction-u-0\">\n                        <div className=\"prediction-number\">0</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-1\">\n                        <div className=\"prediction-number\">1</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-2\">\n                        <div className=\"prediction-number\">2</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-3\">\n                        <div className=\"prediction-number\">3</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-4\">\n                        <div className=\"prediction-number\">4</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-5\">\n                        <div className=\"prediction-number\">5</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-6\">\n                        <div className=\"prediction-number\">6</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-7\">\n                        <div className=\"prediction-number\">7</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-8\">\n                        <div className=\"prediction-number\">8</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-9\">\n                        <div className=\"prediction-number\">9</div>\n                        <div className=\"prediction-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                    <div className=\"prediction-col\" id=\"prediction-u-10\">\n                        <div className=\"prediction-number\">U</div>\n                        <div className=\"prediction-uncertainty-bar-container\">\n                            <div className=\"prediction-bar\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default CanvasUncertainty;\n","import React from 'react';\nimport Canvas from \"./Canvas\";\nimport CanvasUncertainty from \"./CanvasUncertainty\";\n\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab'\n\n\nclass Controller extends React.Component {\n    constructor(props, context) {\n\t\tsuper(props, context);\n\t\tthis.state = {\n\t\t\tkey: 'home',\n\t\t};\n    }\n    \n    render() {\n        const { session, session2 } = this.props;\n        const { modelloaded, model2loaded, modelloading, model2loading } = this.props.status;\n        if (modelloading===1 | model2loading===1) {\n            return (\n                <div>\n                    Loading models...\n                </div>\n            )\n        }\n        if (modelloading===0 & model2loading===0 & modelloaded===0 & model2loaded===0) {\n            return (\n                <div>\n                    Found a problem loading the models...\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Tabs activeKey={this.state.key} id=\"tab_controller\" onSelect={key => this.setState({ key })}>\n                    <Tab eventKey=\"home\" title=\"Standard\">\n                        <Canvas modelloaded={modelloaded} session={session} />\n                    </Tab>\n                    <Tab eventKey=\"uncertain\" title=\"With Uncertainty\">\n                        <CanvasUncertainty modelloaded={model2loaded} session={session2} />\n                    </Tab>\n                </Tabs>\n            </div>\n        );\n    }\n}\n\nexport default Controller;","import React from \"react\";\nimport Controller from \"./components/Controller\";\nimport { InferenceSession } from \"onnxjs\";\nimport \"./App.css\";\n\nconst INITIAL_STATE = {\n  modelloading: 0,\n  modelloaded: 0,\n  model2loading: 0,\n  model2loaded: 0,\n  backendHint: 'webgl', // ['webgl', 'wasm', 'cpu']\n}\n\n// if on localhost >> uncomment next line\nlet MODEL_URL = \"./models/onnx_lenet_standard.onnx\";\nlet MODEL_URL_2 = \"./models/onnx_lenet_manualdropout.onnx\";\n// if on localhost >> comment next line\n//const MODEL_URL = \"./models/onnx_model.onnx\";\n\nif (window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") {\n  MODEL_URL = './react_mnist_classifier/models/onnx_lenet_standard.onnx';\n  MODEL_URL_2 = './react_mnist_classifier/models/onnx_lenet_manualdropout.onnx';\n  // console.log(\"It's a local server!\");\n} else {\n  // console.log(\"It's NOT a local server!\");\n}\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.loadModel();\n    this.loadModel2();\n  }\n\n  state = { ...INITIAL_STATE };\n\n  // create 2 sessions: one for each model\n  session = new InferenceSession({ backendHint: this.state.backendHint });\n  session2 = new InferenceSession({ backendHint: this.state.backendHint });\n\n  loadModel = async () => {\n    try {\n      if (!this.state.modelloaded) {\n        this.setState({\n          modelLoading: 1,\n        });\n        await this.session.loadModel(MODEL_URL);\n        this.setState({\n          modelloaded: 1,\n          modelLoading: 0,\n        });\n      }\n    }\n    catch(e) {\n      console.warn(e);\n    }\n  }\n\n  loadModel2 = async () => {\n    try {\n      if (!this.state.model2Loaded) {\n        this.setState({\n          model2Loading: 1,\n        });\n        await this.session2.loadModel(MODEL_URL_2);\n        this.setState({\n          model2loaded: 1,\n          model2Loading: 0,\n        });\n      }\n    }\n    catch(e) {\n      console.warn(e);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Handwritten digits classification.\n          <p> A simple demo of a classification model running on the browser </p>\n        </header>\n        <p> The app is implemented using <a href='https://reactjs.org/'>ReactJS</a> and <a href='https://github.com/microsoft/onnxjs'>ONNXJS</a>. See <a href='https://github.com/mcpimentel/react_mnist_classifier'>here</a> for code and other details. </p> \n        <p> It has been tested with Google Chrome (both desktop and mobile devices)! Have not conducted extensive tests on other browsers! </p>\n        <p> \"U\" corresponds to an estimation of uncertainty in the prediction!</p>\n        <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n          <Controller status={this.state} session={this.session} session2={this.session2} />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\n// <Canvas status={this.state} session={this.session} />\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}